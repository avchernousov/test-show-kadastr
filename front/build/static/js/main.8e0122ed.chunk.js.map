{"version":3,"sources":["lib/list.js","components/Form/index.js","components/Map/index.js","App.js","reportWebVitals.js","index.js"],"names":["list","Form","onSearch","options","useState","inputValue","setInputValue","Card","Autocomplete","id","getOptionLabel","option","style","width","onInputChange","event","newInputValue","renderInput","params","TextField","label","IconButton","aria-label","onClick","styled","div","Search","Map","coordinates","type","coords","setCoords","center","setCenter","useEffect","length","Wrapper","state","zoom","widht","height","geometry","fillColor","strokeColor","fillOpacity","opacity","strokeWidth","strokeStyle","float","App","setOptions","setType","fetch","then","response","json","data","ids","catch","error","console","log","Container","value","features","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e0122ed.chunk.js","sourcesContent":["export const list = [\r\n  '47:23:0233001:307',\r\n  '47:23:0905005:62',\r\n  '47:14:0401001:53',\r\n  '47:23:0319002:66'\r\n];\r\n","import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField  from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { list } from '../../lib/list.js';\r\n\r\nconst Form = ({ onSearch, options = list }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  return (\r\n    <Card>\r\n      <Autocomplete\r\n        inputValue={inputValue}\r\n        id=\"search\"\r\n        options={options} //\r\n        getOptionLabel={(option) => option}\r\n        style={{ width: 430 }}\r\n        onInputChange={(event, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        renderInput={(params) => (\r\n        <Search>\r\n          <TextField {...params} label=\"Участки\" />\r\n            <IconButton aria-label=\"search\" onClick={() => onSearch(inputValue)}>\r\n              <SearchIcon />\r\n            </IconButton>\r\n        </Search>\r\n        )}\r\n        />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n\r\nconst Card = styled.div`\r\n  display: flex;\r\n  padding: 16px 12px;\r\n  box-shadow: 1px 2px 8px 0 rgb(13 15 16 / 30%);\r\n  position: absolute;\r\n  top: 20px;\r\n  left: 20px;\r\n  z-index: 2;\r\n  background-color: #fff;\r\n`;\r\n\r\nconst Search = styled.div`\r\n  display: flex;\r\n`;","import { useEffect, useState } from 'react';\r\nimport { YMaps, Map as YMap, Polygon, ZoomControl, GeolocationControl, TypeSelector, Placemark } from 'react-yandex-maps';\r\nimport styled from 'styled-components';\r\n\r\nconst Map = ({ coordinates, type }) => {\r\n  const [ coords, setCoords ] = useState(coordinates);\r\n  const [ center, setCenter ] = useState([55.75, 37.57]);\r\n\r\n  useEffect(() => {\r\n    if (coordinates.length) {\r\n      setCoords(coordinates);\r\n      setCenter(coordinates[0][0]);\r\n    }\r\n  }, [coordinates]);\r\n\r\n\r\n  return (\r\n    <Wrapper>\r\n      <YMaps>\r\n        <div>\r\n          <YMap state={{ center: center, zoom: 18 }} style={{ widht: '100%', height: '100vh'}}>\r\n            {type === 'MultiPolygon' ? (\r\n              <Polygon\r\n                geometry={coords}\r\n                options={{\r\n                fillColor: '#00FF00',\r\n                strokeColor: '#0000FF',\r\n                fillOpacity: 0.3,\r\n                opacity: 0.5,\r\n                strokeWidth: 2,\r\n                strokeStyle: 'solid',\r\n              }}\r\n            />) : ( \r\n            <Placemark geometry={coords} />)}\r\n          <ZoomControl options={{ float: 'left' }} />\r\n          <GeolocationControl options={{ float: 'right' }} />\r\n          <TypeSelector options={{ float: 'right' }} />\r\n            </YMap>\r\n        </div>\r\n      </YMaps>\r\n      </Wrapper>\r\n      );\r\n};\r\n\r\nexport default Map;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n`;","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Form, Map } from './components';\r\n\r\nconst App = () => {\r\n  const [ options, setOptions ] = useState([]);\r\n  const [ type, setType ] = useState('');\r\n  const [ coords, setCoords ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('/get_ids')\r\n      .then((response) => response.json())\r\n      .then((data) => setOptions(data.ids))\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onSearch = (value) => {\r\n    fetch(`/get_poly?cadastr_id=${value}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setType(data.features[0].geometry.type);\r\n        setCoords(data.features[0].geometry.coordinates[0]);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSearch={(value) => onSearch(value)} options={options} />\r\n      <Map type={type} coordinates={coords} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n`;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}